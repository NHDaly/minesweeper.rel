// install

// ScreenCoords count from (1,1) in top-left to (width,height) in bottom-right
value type ScreenCoord = Int,Int

// query of death version:
// @inline def x[sc in ScreenCoord](v) = unpack(sc, :ScreenCoord, v, _)
// @inline def y[sc in ScreenCoord](v) = unpack(sc, :ScreenCoord, _, v)

@inline def x[sc in ScreenCoord](v) = ^ScreenCoord[v, _](sc)
@inline def y[sc in ScreenCoord](v) = ^ScreenCoord[_, v](sc)

@inline def ^SC = ^ScreenCoord

bound view_center = GameCoord
bound view_zoom = Float
def view_zoom = 1.0 // TODO: does this work?

ic { count[view_center] = 1 }
ic { count[view_zoom] = 1 }

bound reset = true
// def insert:view_center = ^GameCoord[0,0], (reset or not exists(view_center))
// def delete:view_center = view_center, reset
def view_center = ^GameCoord[0,0]


// TODO: Adjustable? Make them into base relations?
def view_width = 16
def view_height = 16

def view_gc_width = float_int_convert[round[view_width * view_zoom]]
def view_gc_height = float_int_convert[round[view_height * view_zoom]]

def in_view {
   ^GameCoord[cx, cy]
   from
   cx in range[view_center.x - view_gc_width รท 2,
               view_center.x + view_gc_width รท 2 - 1,
               1],
   cy in range[view_center.y - view_gc_height รท 2,
               view_center.y + view_gc_height รท 2 - 1,
               1]
}

// @inline
// def sc_gc_convert[sc in ScreenCoord](gc in GameCoord) {
//     ^GameCoord[
//         (((sc.x - 1) - view_width / 2) / view_zoom) - view_center.x,
//         (((sc.y - 1) - view_height / 2) / view_zoom) - view_center.y
//     ](gc)
// }

// Ignore zoom for now........
@inline
def sc_gc[sc in ScreenCoord](gc in GameCoord) {
    gc = ^GameCoord[
        ((sc.x - 1) - float_int_convert[view_width  / 2]) - view_center.x,
        ((sc.y - 1) - float_int_convert[view_height / 2]) - view_center.y
    ]
}

@inline
def cell[gc in GameCoord] = {
    if flag(gc) then
        "!"
    else if revealed(gc) then
        string[mine_count[gc] <++ 0]
    else if game_over and mine(gc) then
        "x"
    else
        "."
    end end end
}

def display_cell[row, col] {
    cell[gc]
    from gc in in_view
    where gc.x = col and gc.y = row
}

def view_r = range[1, view_height, 1]
def view_c = range[1, view_width, 1]

@inline def align[d] =
    if 0 <= d < 10 then
        " %d"
    else
        "%d"
    end

def header {
    """
        %(string_join["", {c : "%(align[c])", view_c(c)}])
        %(string_join["", {c : "--", view_c(c)}])
    """
}
def display_row = {r : string_join[' ', {
        c :
            display_cell[r, c]
    }]
}

def display_grid {
    concat[
        header,
        string_join['\n', {
            i : concat["%(align[i]) | ", sort[display_row][i,_]]
        }]
    ]
}

def game_over = exists(c : test(c) and mine(c))

def display = if game_over then
    "Game Over\n\n%display_grid"
else
    display_grid
end
