
// install

// These will be set during the query, to render a given portion of the screen
// For example:
// ```
// // query
// def screen_center = ^Coord[1, 1]
// def screen_width = 120
// def screen_height = 80
// def output = screen_grid
// ```

@function
declare screen_center(vs...) requires {Coord}(vs...)
@function
declare screen_width(vs...) requires {Int}(vs...)
@function
declare screen_height(vs...) requires {Int}(vs...)

// @ondemand
@inline
def coords { coord_conversion[screen_center, screen_width, screen_height] }

// @ondemand
@inline
def display_cell[row, col]: (out): {
        out = cell[col, row]
}

def display_mine_count_or_empty[x, y]: {
    if_then_else[mine_count[x, y] = 0, " ", string[mine_count[x, y]]]
}

// Split this out to make the if/else simpler in cell[].
// @ondemand
@inline
def _cell[x, y]: {
    (flag(^Coord[x,y]), "!");
    (revealed(^Coord[x,y]), (display_mine_count_or_empty[x, y]));
    (exploded_mine(^Coord[x,y]), "x");
}
// @ondemand
@inline
def cell[x, y]: {
    _cell[x, y];
    (empty(_cell[x, y]), ".");
}


def view_r { range[1, screen_height, 1] }
def view_c { range[1, screen_width, 1] }

// Victory and game_over aren't defined anymore in an infinite grid.
// def victory { count[flag] = count[correct_flag] = count[mine] }
// def game_over = exists(c : test(c) and mine(c))

def score {
    count0[revealed] * revealed_points
      +
    count0[exploded_mine] * mine_points
}
@outline def count0[{R}]: count[R] <++ 0

def revealed_points { 1 }
def mine_points { -50 }

// -------------------------------------------------------------------------------
// -- Game display outputs ---------------------------------------------------------------

// HACK: Works around a perf bug in display_cell:
// https://relationalai.slack.com/archives/C06PTH5KWTV/p1745014026966109?thread_ts=1744995772.227659&cid=C06PTH5KWTV
// def spec_r { ::std::mirror::lift[view_r] }
// // def spec_c { ::std::mirror::lift[view_c] }
// def spec_screen_grid {
//     [r in spec_r]: [c in view_c]: display_cell[::std::mirror::lower[r], c]
// }
// def screen_grid {
//     [r in view_r]: [c in view_c]: spec_screen_grid[::std::mirror::lift[r], c]
// }
// def screen_grid {
//     [r in spec_r]: [c in spec_c]: display_cell[r, c]
// }
// NEW HACK: Just ask for all [r,c] pairs from the client.
// That didn't work either.

@nomaintain
def screen_grid {
    [r in view_r]: [c in view_r]: display_cell[r, c]
}

// -------------------------------------------------------------------------------
// -- Text outputs, which are not used for the actual game, only for debugging. --

def align[d in Int]:
    if_then_else[0 <= d < 10, " %d", "%d"]

def top_axis {
    """
        %(string_join["", {[c]: ("%(align[c])", view_c(c))}])
        %(string_join["", {[c]: ("--", view_c(c))}])
    """
}

def display_row {[r in view_r]: string_join[' ', {
        [c in view_c]: display_cell[r, c]
    }]
}

def display_grid {
    concat[
        top_axis,
        string_join['\n', { (i, out): {
            exists((r) | {
                out = concat["%(align[r]) | ", display_row[r]]
                where r = i})
        }}]
    ]
}

def display { "\n%display_grid\n" }
