// install

bound reset = true

@inline
def cell[c in Coord] = {
    if flag(c) then
        "!"
    else if revealed(c) then
        string[mine_count[c]] <++ " "
    else if game_over and mine(c) then
        "x"
    else
        "."
    end end end
}

def display_cell[row, col] {
    cell[c]
    from c in grid
    where c.x = col and c.y = row
}

def view_r = range[1, game_height, 1]
def view_c = range[1, game_width, 1]

@inline def align[d] =
    if 0 <= d < 10 then
        " %d"
    else
        "%d"
    end

def header {
    """
        %(string_join["", {c : "%(align[c])", view_c(c)}])
        %(string_join["", {c : "--", view_c(c)}])
    """
}
def display_row = {r : string_join[' ', {
        c :
            display_cell[r, c]
    }]
}

def display_grid {
    concat[
        header,
        string_join['\n', {
            i : concat["%(align[i]) | ", sort[display_row][i,_]]
        }]
    ]
}

def victory { count[flag] = count[mine] }
def game_over = exists(c : test(c) and mine(c))
@inline def count0[R] = count[R] <++ 0
def score = count0[correct_flag] - (count0[flag] - count0[correct_flag])

def display = if game_over then
        "Game Over\nScore: %score\n\n%display_grid"
    else if victory then
        "Victory!\nScore: %score\n\n%display_grid"
    else
        display_grid
    end end
