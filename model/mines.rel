// install

value type Coord = Int,Int

def x[c in Coord](v) = ^Coord[v, _](c)
def y[c in Coord](v) = ^Coord[_, v](c)

def game_width = 16
def game_height = 16

def grid = ^Coord[
    range[1, game_width, 1],
    range[1, game_height, 1]
]

bound mine = Coord

def neighbor[c in Coord] {
    ^Coord[x2, y2]
    from x2 in (c.x-1; c.x; c.x+1), y2 in (c.y-1; c.y; c.y+1)
    where not (x2 = c.x and y2 = c.y)
}

def mine_count[c in Coord] {
    count[n in neighbor[c] : mine(n)]
}

bound test = Coord
def correct_test(c in test) {
    not mine(c)
}

def revealed(c in Coord) = correct_test(c)
def revealed(c in Coord) {
    neighbor[r](c)
    from r
    where
        revealed(r)
        and not exists(r.mine_count)
        and grid(c)
}

bound flag = Coord
def correct_flag(c in flag) {
    mine(c)
}

ic { disjoint(flag, test) }

// Game moves
bound insert:test = Coord
bound insert:flag = Coord

// no cheating :P
// ic { not count[insert:test] > 1 }
// ic { not count[insert:flag] > 1 }
