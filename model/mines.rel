// install

value type Coord {(Int,Int)}  // x,y
def x(c in Coord, v): ^Coord(v, _, c)
def y(c in Coord, v): ^Coord(_, v, c)

// def game_width { 128 }
// def game_height { 128 }

// def grid { ^Coord[
//     range[-1 * game_width, game_width, 1],
//     range[-1 * game_height, game_height, 1]
// ]}

// ----------------------------
// declare mine(v...) requires {Coord}(v...)

// Mines are placed randomly throughout the infinite grid. Since they're infinite, we can't
// compute them all, and instead they must be _derived_ based on a function of the
// coordinate. We use a hash function to do this.

// @ondemand
@inline
def mine(x, y): {
    // The original game has 40 mines in a 16x16 grid, or 256 cells.
    // Rate of seeds: 40 / 256 = 15.625%, or 10 in 64
    is_mine[x, y] = 1
}

// Returns 0 for no mine, and 1 for a mine
// @inline def is_mine(c in Coord, v):
//     v = (64 - int64[(murmurhash3f_with_seed[seed, c] % 64)]) รท 55
@inline def is_mine(x, y, v):
    v = (64 - int64[(hash_coord[x, y] % 64)]) รท 55
@inline def hash_coord[x, y]:
    murmurhash3f_with_seed[murmurhash3f_with_seed[seed, x], y]

// ----------------------------

// @ondemand
@inline
def neighbor[c]: (out): {
    exists((x2, y2) | {
        out = ^Coord[x2, y2]
        where {( c.y )-1; ( c.y ); ( c.y )+1}(y2)
          and {( c.x )-1; ( c.x ); ( c.x )+1}(x2)
          and not (x2 = (c.x) and y2 = (c.y))
    })
}
// @inline
// def mine_count[c in grid]: {
//     sum[[n]: is_mine[n] where neighbor(c, n)]
// }
// @inline def mine_count[c]:
//     _mine_count[(c.x), (c.y)]

@inline def mine_count[x1, y1]:
    is_mine[x1 - 1, y1 + 1] + is_mine[x1 + 0, y1 + 1] + is_mine[x1 + 1, y1 + 1] +
    is_mine[x1 - 1, y1 + 0]                           + is_mine[x1 + 1, y1 + 0] +
    is_mine[x1 - 1, y1 - 1] + is_mine[x1 + 0, y1 - 1] + is_mine[x1 + 1, y1 - 1]


declare test(vs...) requires {Coord}(vs...)
def correct_test(c in test): {
    not mine((c.x), (c.y))
}

def exploded_mine(c in test): {
    mine((c.x), (c.y))
}
ic () requires disjoint(correct_test, exploded_mine)

// This should now be concrete! It will stop when it encounters enough mines.
def revealed(c): { correct_test(c) }
def revealed(c): {
    exists((r) | neighbor(r, c) where
        revealed(r)
        and mine_count[(r.x), (r.y)] = 0
    )
}

declare flag(vs...) requires {Coord}(vs...)
def correct_flag(c in flag): {
    mine((c.x), (c.y))
}
def incorrect_flag(c in flag): {
    not mine((c.x), (c.y))
}

ic () requires disjoint(flag, test)

// Game moves
declare insert(:test, vs...) requires {Coord}(vs...)
declare insert(:flag, vs...) requires {Coord}(vs...)

ic cant_flag_revealed(x,y) requires {
    insert(:flag, ^Coord[x,y]) implies
        not revealed(^Coord[x,y])
    and not exploded_mine(^Coord[x,y])
}
ic cant_test_flagged(x,y) requires {
    insert(:test, ^Coord[x,y]) implies
        not flag(^Coord[x,y])
}

// no cheating :P
// ic { not count[insert:test] > 1 }
// ic { not count[insert:flag] > 1 }

// -----------------

// Victory and game_over aren't defined anymore in an infinite grid.
// def victory { count[flag] = count[correct_flag] = count[mine] }
// def game_over = exists(c : test(c) and mine(c))

def score {
    count0[revealed] * revealed_points
      +
    count0[exploded_mine] * mine_points
      +
    count0[correct_flag] * flag_points
      +
    count0[incorrect_flag] * -1 * flag_points
}
@outline def count0[{R}]: count[R] <++ 0

def revealed_points { 1 }
def mine_points { -50 }
def flag_points {  5 }
